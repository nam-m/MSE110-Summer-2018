#pragma config(Sensor, S2,     Color,          sensorEV3_Color)
#pragma config(Sensor, S3,     Ultra,          sensorEV3_Ultrasonic)
#pragma config(Motor,  motorA,          RightMotor,    tmotorEV3_Large, PIDControl, driveRight, encoder)
#pragma config(Motor,  motorC,          AM,            tmotorEV3_Medium, PIDControl, encoder)
#pragma config(Motor,  motorD,          LeftMotor,     tmotorEV3_Large, PIDControl, driveLeft, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

task main()
{
	int light_grade;
	int left_encoder;
	int right_encoder;
	//int correction;
	int ArmPos;
	int i = 0; //iteration value
	float n = 1; //speed modifier, testing only

	setMotorBrakeMode(LeftMotor,motorCoast);
	setMotorBrakeMode(RightMotor,motorCoast);
	resetMotorEncoder(LeftMotor);
	resetMotorEncoder(RightMotor);

	while (true)
	{
		float ObjDist = getUSDistance(Ultra);
			//displayCenteredBigTextLine(7, "ObjDist: %f", ObjDist);

/*Stop 10cm away and beep*/
		if (ObjDist <= 10 && i == 0)
		{
			sleep (2000);
			playSound(soundBeepBeep);
			sleep (1000);
			i++;
  	}

   //(possibly move into if statement)
		//displayCenteredBigTextLine(7, "ArmPos: %f", ArmPos);

/*Move Object at least 10cm away from line*/
  	if (ObjDist <= 4)
		{
			ArmPos = getMotorEncoder(AM); (Maybe)
			setMotorTarget(AM, -135, 100*n);
			waitUntilMotorStop(AM);
			
			setMotorSync(LeftMotor, RightMotor, 0, 100*n);
			light_grade = getColorReflected(Color);
			
			do{
					light_grade = getColorReflected(Color);	
				}while(light_grade != 0);
					
			setMotorSync(LeftMotor, RightMotor, 0, 0*n);
		}

		
		if (ArmPos != 0) // ( and Object is off the table/ car has moved 10 cm)
		{
			setMotorTarget(AM, 0, 100*n);
			waitUntilMotorStop(AM);
		}

/*Track Line*/
		light_grade = getColorReflected(Color); //move above?
		//displayCenteredBigTextLine(2, "Color: %d", light_grade);

		//correction = 30 - light_grade;
		right_encoder = getMotorEncoder(RightMotor);
		left_encoder = getMotorEncoder(LeftMotor);

		if (light_grade <= 30 && light_grade > 0) //black area, turn left
		{
			setMotorSpeed(RightMotor, (58 - light_grade)*0.91);
			setMotorSpeed(LeftMotor, (light_grade - 7 - 12)*1.5);
			//setMotorSpeed(RightMotor, correction * 1);
			//setMotorSpeed(LeftMotor, correction * 1.4);
		}

		else if (light_grade > 30) //out of black area, turn right (sharper)
		{
			//resetMotorEncoder(LeftMotor);
			//setMotorSpeed(LeftMotor, 1);
			//while (left_encoder <= 190 && light_grade >= 10) //turn right
			//{
			//	light_grade = getColorReflected(Color);
			//	left_encoder = getMotorEncoder(LeftMotor);
			//	setMotorSpeed(RightMotor, (50 - light_grade)*1);
			//	setMotorSpeed(LeftMotor, (light_grade - 6)*1);
			//}
			//while (left_encoder > 190 && left_encoder < 570 && light_grade >= 10)
			//{
			//	light_grade = getColorReflected(Color);
			//	left_encoder = getMotorEncoder(LeftMotor);
			//	setMotorSpeed(RightMotor, 0);
			//	setMotorSpeed(LeftMotor, 50);
			//}
			//setMotorSpeed(RightMotor, 10);
			//setMotorSpeed(LeftMotor, 5);
			//resetMotorEncoder(LeftMotor);

			setMotorSpeed(RightMotor, (58 - light_grade)*0.66);
			setMotorSpeed(LeftMotor, (light_grade - 7 - 12)*1);
			//setMotorSpeed(RightMotor, correction * 1);
			//setMotorSpeed(LeftMotor, correction * 1.4);
		}

		else
		{
			setMotorSpeed(RightMotor, 0);
			setMotorSpeed(LeftMotor, 0);
		}
	}
}
