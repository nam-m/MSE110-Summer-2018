#pragma config(Sensor, S2,     Color,          sensorEV3_Color)
#pragma config(Sensor, S3,     Ultra,          sensorEV3_Ultrasonic)
#pragma config(Motor,  motorA,          RightMotor,    tmotorEV3_Large, PIDControl, driveRight, encoder)
#pragma config(Motor,  motorD,          LeftMotor,     tmotorEV3_Large, PIDControl, driveLeft, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

task main()
{
	setMotorBrakeMode(LeftMotor,motorCoast);
	setMotorBrakeMode(RightMotor,motorCoast);

	float p = 1.6; // P constant
	float i = 0.00; // I constant
	float d = 20; // D constant
	float straight = 20; //power level to go straight when error = 0;
	int light_grade;
	int black = 52; //45-50
	int white = 8; //6-7
	int offset = (black + white)/2; //(target track edge) attempt to make it integer
	int integral = 0;
	int lastError = 0;
	int derivative = 0;
	int error;
	float power;

	while (true)
	{
		light_grade = getColorReflected(Color);
		displayCenteredBigTextLine(2, "Color: %d", light_grade);
		error = light_grade - offset;
		integral = (2/3)* integral + error;
		derivative = error - lastError;
		power = p*error + i*integral + d*derivative;
		setMotorSpeed(RightMotor, straight - power);
		setMotorSpeed(LeftMotor, straight + power);
		lastError = error;
		sleep(5);
	}
}
