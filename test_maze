#pragma config(Sensor, S1,     leftTouch,      sensorEV3_Touch)
#pragma config(Sensor, S2,     Ultra,          sensorEV3_Ultrasonic)
#pragma config(Sensor, S4,     rightTouch,     sensorEV3_Touch)
#pragma config(Motor,  motorA,          leftMotor,     tmotorEV3_Large, PIDControl, driveLeft, encoder)
#pragma config(Motor,  motorD,          rightMotor,    tmotorEV3_Large, PIDControl, driveRight, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

const float cell = 10; //cell length (cell is a square)
const int N = 0; //north
const int E = 2; //east
const int S = 3; //south
const int W = 4; //west
const int n = 0.1; //speed modifier
const int face = 0; //predefined face direction in maze

//Robot movements
void forward (float n)
{
	setMotorSyncEncoder(leftMotor, rightMotor, 0, 100*n, 10);
}
void left (float n) //rotate left 90 deg
{
	setMotorSyncEncoder(leftMotor, rightMotor, -100, 100*n, 10);
}
void right (float n) //rotate right 90 deg
{
	setMotorSyncEncoder(leftMotor, rightMotor, 100, 100*n, 10);
}
void backward (float n) //make 180 deg turn
{
	//clearTimer(T1);
	setMotorSyncTime(leftMotor, rightMotor, 100, 1500, 20);
}

bool wall () //wall detection
{
	bool found = false;
	if (getUSDistance(Ultra) < cell)
		found = true;
	return found;
}

void mazeSolve (bool wall)
{
	int face;
	right(n);
	if (wall == true)
	{
		left(n);
		if (face == N)
			face = W;
		else
			face--;
	}
	else
	{
		forward(n);
	}
}

task main()
{
	while(true)
	{
		//right wall follower
		//mazeSolve(n);
		forward(n);
	}
}
